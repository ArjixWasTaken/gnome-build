ffi_call(3)              BSD Library Functions Manual              ffi_call(3)

NNAAMMEE
     ffffii__ccaallll -- Invoke a foreign function.

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ffffii..hh>>

     _v_o_i_d
     ffffii__ccaallll(_f_f_i___c_i_f _*_c_i_f, _v_o_i_d _(_*_f_n_)_(_v_o_i_d_), _v_o_i_d _*_r_v_a_l_u_e, _v_o_i_d _*_*_a_v_a_l_u_e);

DDEESSCCRRIIPPTTIIOONN
     The ffffii__ccaallll function provides a simple mechanism for invoking a function
     without requiring knowledge of the function's interface at compile time.
     _f_n is called with the values retrieved from the pointers in the _a_v_a_l_u_e
     array. The return value from _f_n is placed in storage pointed to by
     _r_v_a_l_u_e.  _c_i_f contains information describing the data types, sizes and
     alignments of the arguments to and return value from _f_n, and must be ini-
     tialized with ffffii__pprreepp__cciiff before it is used with ffffii__ccaallll.

     _r_v_a_l_u_e must point to storage that is sizeof(ffi_arg) or larger for non-
     floating point types. For smaller-sized return value types, the ffffii__aarrgg
     or ffffii__ssaarrgg integral type must be used to hold the return value.

EEXXAAMMPPLLEESS
     #include <ffi.h>
     #include <stdio.h>

     unsigned char
     foo(unsigned int, float);

     int
     main(int argc, const char **argv)
     {
         ffi_cif cif;
         ffi_type *arg_types[2];
         void *arg_values[2];
         ffi_status status;

         // Because the return value from foo() is smaller than sizeof(long), it
         // must be passed as ffi_arg or ffi_sarg.
         ffi_arg result;

         // Specify the data type of each argument. Available types are defined
         // in <ffi/ffi.h>.
         arg_types[0] = &ffi_type_uint;
         arg_types[1] = &ffi_type_float;

         // Prepare the ffi_cif structure.
         if ((status = ffi_prep_cif(&cif, FFI_DEFAULT_ABI,
             2, &ffi_type_uint8, arg_types)) != FFI_OK)
         {
             // Handle the ffi_status error.
         }

         // Specify the values of each argument.
         unsigned int arg1 = 42;
         float arg2 = 5.1;

         arg_values[0] = &arg1;
         arg_values[1] = &arg2;

         // Invoke the function.
         ffi_call(&cif, FFI_FN(foo), &result, arg_values);

         // The ffi_arg 'result' now contains the unsigned char returned from foo(),
         // which can be accessed by a typecast.
         printf("result is %hhu", (unsigned char)result);

         return 0;
     }

     // The target function.
     unsigned char
     foo(unsigned int x, float y)
     {
         unsigned char result = x - y;
         return result;
     }

SSEEEE AALLSSOO
     ffi(3), ffi_prep_cif(3)

                               February 15, 2008
